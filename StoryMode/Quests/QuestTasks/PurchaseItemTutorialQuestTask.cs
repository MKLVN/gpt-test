using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem;
using TaleWorlds.Core;
using TaleWorlds.SaveSystem;

namespace StoryMode.Quests.QuestTasks;

public class PurchaseItemTutorialQuestTask : QuestTaskBase
{
	[SaveableField(1)]
	private readonly JournalLog _progressLog;

	private int _targetItemAmount;

	private ItemObject _item;

	[SaveableField(2)]
	private int _purchasedItemAmount;

	public PurchaseItemTutorialQuestTask(Action onSucceed, int targetItemAmount, ItemObject item, JournalLog progressLog = null)
		: base(null, onSucceed)
	{
		_targetItemAmount = targetItemAmount;
		_item = item;
		_progressLog = progressLog;
		_purchasedItemAmount = 0;
	}

	public void InitializeTaskOnLoad(int targetItemAmount, ItemObject item)
	{
		_targetItemAmount = targetItemAmount;
		_item = item;
	}

	public override void SetReferences()
	{
		CampaignEvents.PlayerInventoryExchangeEvent.AddNonSerializedListener(this, PlayerInventoryExchange);
	}

	private void PlayerInventoryExchange(List<(ItemRosterElement, int)> purchasedItems, List<(ItemRosterElement, int)> soldItems, bool isTrading)
	{
		if (!base.IsActive)
		{
			return;
		}
		foreach (var purchasedItem in purchasedItems)
		{
			ItemRosterElement itemRosterElement;
			(itemRosterElement, _) = purchasedItem;
			if (itemRosterElement.EquipmentElement.Item == _item)
			{
				int purchasedItemAmount = _purchasedItemAmount;
				itemRosterElement = purchasedItem.Item1;
				_purchasedItemAmount = purchasedItemAmount + itemRosterElement.Amount;
				if (_purchasedItemAmount >= _targetItemAmount)
				{
					_progressLog?.UpdateCurrentProgress(_targetItemAmount);
					Finish(FinishStates.Success);
					break;
				}
				_progressLog?.UpdateCurrentProgress(_purchasedItemAmount);
			}
		}
	}

	internal static void AutoGeneratedStaticCollectObjectsPurchaseItemTutorialQuestTask(object o, List<object> collectedObjects)
	{
		((PurchaseItemTutorialQuestTask)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(_progressLog);
	}

	internal static object AutoGeneratedGetMemberValue_progressLog(object o)
	{
		return ((PurchaseItemTutorialQuestTask)o)._progressLog;
	}

	internal static object AutoGeneratedGetMemberValue_purchasedItemAmount(object o)
	{
		return ((PurchaseItemTutorialQuestTask)o)._purchasedItemAmount;
	}
}
