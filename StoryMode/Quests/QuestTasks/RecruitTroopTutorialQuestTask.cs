using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.SaveSystem;

namespace StoryMode.Quests.QuestTasks;

public class RecruitTroopTutorialQuestTask : QuestTaskBase
{
	private int _targetRecruitAmount;

	private Func<CharacterObject, bool> _recruitTypeConditions;

	private Settlement _recruitSettlement;

	[SaveableField(1)]
	private readonly JournalLog _progressLog;

	[SaveableField(2)]
	private int _recruitedTroopAmount;

	public RecruitTroopTutorialQuestTask(Action onSucceed, int targetRecruitAmount, Func<CharacterObject, bool> recruitTypeConditions, Settlement recruitSettlement = null, JournalLog progressLog = null)
		: base(null, onSucceed)
	{
		_targetRecruitAmount = targetRecruitAmount;
		_recruitTypeConditions = recruitTypeConditions;
		_recruitSettlement = recruitSettlement;
		_progressLog = progressLog;
		_recruitedTroopAmount = 0;
	}

	public void InitializeTaskOnLoad(int targetRecruitAmount, Func<CharacterObject, bool> recruitTypeConditions, Settlement recruitSettlement = null)
	{
		_targetRecruitAmount = targetRecruitAmount;
		_recruitTypeConditions = recruitTypeConditions;
		_recruitSettlement = recruitSettlement;
	}

	public override void SetReferences()
	{
		CampaignEvents.OnUnitRecruitedEvent.AddNonSerializedListener(this, OnUnitRecruited);
	}

	private void OnUnitRecruited(CharacterObject character, int amount)
	{
		if (base.IsActive && (_recruitSettlement == null || Settlement.CurrentSettlement == _recruitSettlement) && _recruitTypeConditions(character))
		{
			_recruitedTroopAmount += amount;
			if (_recruitedTroopAmount >= _targetRecruitAmount)
			{
				_progressLog?.UpdateCurrentProgress(_targetRecruitAmount);
				Finish(FinishStates.Success);
			}
			else
			{
				_progressLog?.UpdateCurrentProgress(_recruitedTroopAmount);
			}
		}
	}

	internal static void AutoGeneratedStaticCollectObjectsRecruitTroopTutorialQuestTask(object o, List<object> collectedObjects)
	{
		((RecruitTroopTutorialQuestTask)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		collectedObjects.Add(_progressLog);
	}

	internal static object AutoGeneratedGetMemberValue_progressLog(object o)
	{
		return ((RecruitTroopTutorialQuestTask)o)._progressLog;
	}

	internal static object AutoGeneratedGetMemberValue_recruitedTroopAmount(object o)
	{
		return ((RecruitTroopTutorialQuestTask)o)._recruitedTroopAmount;
	}
}
