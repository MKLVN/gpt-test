using System;
using System.Collections.Generic;
using System.Linq;
using StoryMode.Quests.SecondPhase;
using StoryMode.Quests.SecondPhase.ConspiracyQuests;
using StoryMode.StoryModeObjects;
using TaleWorlds.CampaignSystem;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.SceneInformationPopupTypes;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace StoryMode.StoryModePhases;

public class SecondPhase
{
	public const int MaxConspiracyStrength = 2000;

	public const float DailyConspiracyChange = 2.777777f;

	public const int ConspiracyQuestDurationAsWeeks = 3;

	[SaveableField(3)]
	private int _stopConspiracyAttempts;

	[SaveableField(4)]
	private ConspiracyQuestBase _lastConspiracyQuest;

	private MBList<Type> _conspiracyQuestTypes;

	public static SecondPhase Instance => StoryModeManager.Current.MainStoryLine.SecondPhase;

	[SaveableProperty(1)]
	public CampaignTime LastConspiracyQuestCreationTime { get; private set; }

	[SaveableProperty(5)]
	public float ConspiracyStrength { get; private set; }

	internal static void AutoGeneratedStaticCollectObjectsSecondPhase(object o, List<object> collectedObjects)
	{
		((SecondPhase)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		collectedObjects.Add(_lastConspiracyQuest);
		CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(LastConspiracyQuestCreationTime, collectedObjects);
	}

	internal static object AutoGeneratedGetMemberValueLastConspiracyQuestCreationTime(object o)
	{
		return ((SecondPhase)o).LastConspiracyQuestCreationTime;
	}

	internal static object AutoGeneratedGetMemberValueConspiracyStrength(object o)
	{
		return ((SecondPhase)o).ConspiracyStrength;
	}

	internal static object AutoGeneratedGetMemberValue_stopConspiracyAttempts(object o)
	{
		return ((SecondPhase)o)._stopConspiracyAttempts;
	}

	internal static object AutoGeneratedGetMemberValue_lastConspiracyQuest(object o)
	{
		return ((SecondPhase)o)._lastConspiracyQuest;
	}

	public SecondPhase()
	{
		LastConspiracyQuestCreationTime = CampaignTime.Never;
		ConspiracyStrength = 1000f;
		_stopConspiracyAttempts = 0;
		_lastConspiracyQuest = null;
		InitializeConspiracyQuestTypes();
		SetTransferableOfConspiracyTroops();
	}

	public void OnSessionLaunched()
	{
		InitializeConspiracyQuestTypes();
		SetTransferableOfConspiracyTroops();
	}

	private void InitializeConspiracyQuestTypes()
	{
		_conspiracyQuestTypes = new MBList<Type>
		{
			typeof(DestroyRaidersConspiracyQuest),
			typeof(ConspiracyBaseOfOperationsDiscoveredConspiracyQuest),
			typeof(DisruptSupplyLinesConspiracyQuest)
		};
	}

	private void SetTransferableOfConspiracyTroops()
	{
		PartyTemplateObject @object = Campaign.Current.ObjectManager.GetObject<PartyTemplateObject>("conspiracy_anti_imperial_special_raider_party_template");
		foreach (PartyTemplateStack item in Enumerable.Concat(second: Campaign.Current.ObjectManager.GetObject<PartyTemplateObject>("conspiracy_imperial_special_raider_party_template").Stacks, first: @object.Stacks))
		{
			item.Character.SetTransferableInPartyScreen(isTransferable: false);
		}
		Game.Current.ObjectManager.GetObject<CharacterObject>("conspiracy_commander_antiempire").SetTransferableInPartyScreen(isTransferable: false);
		Game.Current.ObjectManager.GetObject<CharacterObject>("conspiracy_commander_empire").SetTransferableInPartyScreen(isTransferable: false);
	}

	public void TriggerConspiracy()
	{
		LastConspiracyQuestCreationTime = CampaignTime.Now;
		if (_lastConspiracyQuest == null)
		{
			MBInformationManager.ShowSceneNotification(new EmpireConspiracyBeginsSceneNotificationItem(Hero.MainHero, StoryModeManager.Current.MainStoryLine.PlayerSupportedKingdom, StoryModeManager.Current.MainStoryLine.IsOnImperialQuestLine));
		}
	}

	public void IncreaseConspiracyStrength()
	{
		ConspiracyStrength += 2.777777f;
		if (ConspiracyStrength > 2000f)
		{
			ConspiracyStrength = 2000f;
		}
		if (ConspiracyStrength >= 2000f)
		{
			ActivateConspiracy();
		}
	}

	public void DecreaseConspiracyStrength(float amount)
	{
		ConspiracyStrength -= amount;
	}

	public void ActivateConspiracy()
	{
		StoryModeManager.Current.MainStoryLine.CompleteSecondPhase();
	}

	public void CreateNextConspiracyQuest()
	{
		Type type = ((_lastConspiracyQuest == null) ? _conspiracyQuestTypes.GetRandomElement() : _conspiracyQuestTypes.GetRandomElementWithPredicate((Type t) => t != _lastConspiracyQuest.GetType()));
		_stopConspiracyAttempts++;
		object[] args = new object[2]
		{
			"conspiracy_quest_" + _stopConspiracyAttempts,
			StoryModeManager.Current.MainStoryLine.IsOnAntiImperialQuestLine ? StoryModeHeroes.AntiImperialMentor : StoryModeHeroes.ImperialMentor
		};
		_lastConspiracyQuest = (ConspiracyQuestBase)Activator.CreateInstance(type, args);
		_lastConspiracyQuest.StartQuest();
		TriggerConspiracy();
	}
}
