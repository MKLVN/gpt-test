using System.Collections.Generic;
using TaleWorlds.CampaignSystem;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace StoryMode.StoryModePhases;

public class TutorialPhase
{
	private const int GrainAmount = 3;

	private const int RecruitTroopAmount = 6;

	public const int RestrictedModePriority = 1000000;

	public const string QuestVillageStringId = "village_ES3_2";

	public const string TrainingFieldStringId = "tutorial_training_field";

	public const string RadagosRaidersStringId = "storymode_quest_raider";

	public const string TutorialVoluteerStringId = "tutorial_placeholder_volunteer";

	public const string TutorialFemaleRefugeeStringId = "storymode_quest_refugee_female";

	public const string TutorialMaleRefugeeStringId = "storymode_quest_refugee_male";

	public const string TutorialHeadmanStringId = "storymode_tutorial_headman";

	[SaveableField(1)]
	private readonly ItemRoster _tutorialPhaseShoppingRoster;

	public static TutorialPhase Instance => StoryModeManager.Current?.MainStoryLine?.TutorialPhase;

	[SaveableProperty(2)]
	public Settlement TutorialFocusSettlement { get; private set; }

	[SaveableProperty(3)]
	public MobileParty TutorialFocusMobileParty { get; private set; }

	public bool IsCompleted => TutorialQuestPhase == TutorialQuestPhase.Finalized;

	[SaveableProperty(5)]
	public bool TalkedWithBrotherForTheFirstTime { get; private set; }

	[SaveableProperty(6)]
	public bool LockTutorialVillageEnter { get; private set; }

	[SaveableProperty(7)]
	public TutorialQuestPhase TutorialQuestPhase { get; private set; }

	[SaveableProperty(8)]
	public bool IsSkipped { get; private set; }

	[CachedData]
	public Hero TutorialVillageHeadman { get; set; }

	internal static void AutoGeneratedStaticCollectObjectsTutorialPhase(object o, List<object> collectedObjects)
	{
		((TutorialPhase)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
	}

	protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
	{
		collectedObjects.Add(_tutorialPhaseShoppingRoster);
		collectedObjects.Add(TutorialFocusSettlement);
		collectedObjects.Add(TutorialFocusMobileParty);
	}

	internal static object AutoGeneratedGetMemberValueTutorialFocusSettlement(object o)
	{
		return ((TutorialPhase)o).TutorialFocusSettlement;
	}

	internal static object AutoGeneratedGetMemberValueTutorialFocusMobileParty(object o)
	{
		return ((TutorialPhase)o).TutorialFocusMobileParty;
	}

	internal static object AutoGeneratedGetMemberValueTalkedWithBrotherForTheFirstTime(object o)
	{
		return ((TutorialPhase)o).TalkedWithBrotherForTheFirstTime;
	}

	internal static object AutoGeneratedGetMemberValueLockTutorialVillageEnter(object o)
	{
		return ((TutorialPhase)o).LockTutorialVillageEnter;
	}

	internal static object AutoGeneratedGetMemberValueTutorialQuestPhase(object o)
	{
		return ((TutorialPhase)o).TutorialQuestPhase;
	}

	internal static object AutoGeneratedGetMemberValueIsSkipped(object o)
	{
		return ((TutorialPhase)o).IsSkipped;
	}

	internal static object AutoGeneratedGetMemberValue_tutorialPhaseShoppingRoster(object o)
	{
		return ((TutorialPhase)o)._tutorialPhaseShoppingRoster;
	}

	public TutorialPhase()
	{
		_tutorialPhaseShoppingRoster = new ItemRoster();
		TutorialFocusSettlement = null;
		TutorialFocusMobileParty = null;
		TalkedWithBrotherForTheFirstTime = false;
		LockTutorialVillageEnter = false;
		TutorialQuestPhase = TutorialQuestPhase.None;
		IsSkipped = false;
	}

	public void PlayerTalkedWithBrotherForTheFirstTime()
	{
		TalkedWithBrotherForTheFirstTime = true;
	}

	public void SetLockTutorialVillageEnter(bool value)
	{
		LockTutorialVillageEnter = value;
	}

	public void CompleteTutorial(bool isSkipped)
	{
		TutorialQuestPhase = TutorialQuestPhase.Finalized;
		RemoveTutorialFocusSettlement();
		RemoveTutorialFocusMobileParty();
		IsSkipped = isSkipped;
	}

	public void SetTutorialFocusSettlement(Settlement settlement)
	{
		TutorialFocusSettlement = settlement;
	}

	public void RemoveTutorialFocusSettlement()
	{
		TutorialFocusSettlement = null;
	}

	public void RemoveTutorialFocusMobileParty()
	{
		TutorialFocusMobileParty = null;
	}

	public void PrepareRecruitOptionForTutorial()
	{
		bool flag = 6 - (MobileParty.MainParty.MemberRoster.TotalManCount - 2) > 0;
		Hero hero = Settlement.CurrentSettlement.Notables[0];
		CharacterObject @object = MBObjectManager.Instance.GetObject<CharacterObject>("tutorial_placeholder_volunteer");
		for (int i = 0; i < hero.VolunteerTypes.Length; i++)
		{
			if (flag || hero.VolunteerTypes[i] != null)
			{
				hero.VolunteerTypes[i] = @object;
			}
		}
		if (flag)
		{
			int troopRecruitmentCost = Campaign.Current.Models.PartyWageModel.GetTroopRecruitmentCost(@object, Hero.MainHero);
			int num = 6 * troopRecruitmentCost;
			if (Hero.MainHero.Gold < num)
			{
				GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, num);
			}
		}
	}

	public ItemRoster GetAndPrepareBuyProductsOptionForTutorial(Village village)
	{
		if (PartyBase.MainParty.ItemRoster.TotalFood <= 3)
		{
			_tutorialPhaseShoppingRoster.AddToCounts(DefaultItems.Grain, 3);
			int num = village.GetItemPrice(DefaultItems.Grain) * 3;
			if (Hero.MainHero.Gold < num)
			{
				GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, num);
			}
		}
		return _tutorialPhaseShoppingRoster;
	}

	public void SetTutorialQuestPhase(TutorialQuestPhase tutorialQuestPhase)
	{
		TutorialQuestPhase = tutorialQuestPhase;
	}

	public void InitializeTutorialVillageItemRoster()
	{
		Settlement @object = MBObjectManager.Instance.GetObject<Settlement>("village_ES3_2");
		for (int i = 0; i < @object.ItemRoster.Count; i++)
		{
			ItemObject itemAtIndex = @object.ItemRoster.GetItemAtIndex(i);
			if (itemAtIndex != null && !itemAtIndex.IsFood)
			{
				_tutorialPhaseShoppingRoster.AddToCounts(itemAtIndex, MBRandom.RandomInt(1, 4));
			}
		}
	}
}
