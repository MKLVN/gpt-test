using System;
using System.Collections.Generic;
using System.Linq;
using Helpers;
using SandBox.Conversation;
using SandBox.Missions.AgentBehaviors;
using SandBox.Missions.MissionLogics;
using TaleWorlds.CampaignSystem;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.AgentOrigins;
using TaleWorlds.CampaignSystem.CampaignBehaviors;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.CampaignSystem.GameMenus;
using TaleWorlds.CampaignSystem.LogEntries;
using TaleWorlds.CampaignSystem.MapNotificationTypes;
using TaleWorlds.CampaignSystem.Overlay;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.CampaignSystem.Settlements.Locations;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.MountAndBlade;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace SandBox.CampaignBehaviors;

public class AlleyCampaignBehavior : CampaignBehaviorBase, IAlleyCampaignBehavior, ICampaignBehavior
{
	public class AlleyCampaignBehaviorTypeDefiner : SaveableTypeDefiner
	{
		public AlleyCampaignBehaviorTypeDefiner()
			: base(515253)
		{
		}

		protected override void DefineClassTypes()
		{
			AddClassDefinition(typeof(PlayerAlleyData), 1);
		}

		protected override void DefineContainerDefinitions()
		{
			ConstructContainerDefinition(typeof(List<PlayerAlleyData>));
		}
	}

	internal class PlayerAlleyData
	{
		[SaveableField(1)]
		internal readonly Alley Alley;

		[SaveableField(2)]
		internal Hero AssignedClanMember;

		[SaveableField(3)]
		internal Alley UnderAttackBy;

		[SaveableField(4)]
		internal TroopRoster TroopRoster;

		[SaveableField(5)]
		internal CampaignTime LastRecruitTime;

		[SaveableField(6)]
		internal CampaignTime AttackResponseDueDate;

		internal float RandomFloatWeekly
		{
			get
			{
				if (!(LastRecruitTime.ElapsedDaysUntilNow > 7f))
				{
					return 2f;
				}
				return MBRandom.RandomFloatWithSeed((uint)CampaignTime.Now.ToWeeks, (uint)Alley.Tag.GetHashCode());
			}
		}

		internal bool IsUnderAttack => UnderAttackBy != null;

		internal bool IsAssignedClanMemberDead => AssignedClanMember.IsDead;

		internal PlayerAlleyData(Alley alley, TroopRoster roster)
		{
			Alley = alley;
			TroopRoster = roster;
			AssignedClanMember = roster.GetTroopRoster().First().Character.HeroObject;
			UnderAttackBy = null;
		}

		internal void AlleyFightWon()
		{
			UnderAttackBy.Owner.AddPower(0f - UnderAttackBy.Owner.Power * 0.2f);
			UnderAttackBy.SetOwner(null);
			UnderAttackBy = null;
			if (!TroopRoster.Contains(AssignedClanMember.CharacterObject))
			{
				TroopRoster.AddToCounts(AssignedClanMember.CharacterObject, 1, insertAtFront: true);
			}
			Hero.MainHero.AddSkillXp(DefaultSkills.Roguery, Campaign.Current.Models.AlleyModel.GetXpGainAfterSuccessfulAlleyDefenseForMainHero());
			GameMenu.SwitchToMenu("alley_fight_won");
		}

		internal void AlleyFightLost()
		{
			DestroyAlley();
			Hero.MainHero.HitPoints = 1;
			GameMenu.SwitchToMenu("alley_fight_lost");
		}

		internal void AbandonTheAlley(bool fromClanScreen = false)
		{
			if (!fromClanScreen)
			{
				foreach (TroopRosterElement item in TroopRoster.GetTroopRoster())
				{
					if (!item.Character.IsHero)
					{
						MobileParty.MainParty.MemberRoster.AddToCounts(item.Character, item.Number);
					}
				}
			}
			DestroyAlley(fromAbandoning: true);
		}

		internal void DestroyAlley(bool fromAbandoning = false)
		{
			if (!fromAbandoning && AssignedClanMember.IsAlive && AssignedClanMember.DeathMark == KillCharacterAction.KillCharacterActionDetail.None)
			{
				MakeHeroFugitiveAction.Apply(AssignedClanMember);
			}
			if (UnderAttackBy != null)
			{
				Alley.SetOwner(UnderAttackBy.Owner);
			}
			else
			{
				Alley.SetOwner(null);
			}
			TroopRoster.Clear();
			UnderAttackBy = null;
		}

		internal static void AutoGeneratedStaticCollectObjectsPlayerAlleyData(object o, List<object> collectedObjects)
		{
			((PlayerAlleyData)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(Alley);
			collectedObjects.Add(AssignedClanMember);
			collectedObjects.Add(UnderAttackBy);
			collectedObjects.Add(TroopRoster);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(LastRecruitTime, collectedObjects);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(AttackResponseDueDate, collectedObjects);
		}

		internal static object AutoGeneratedGetMemberValueAlley(object o)
		{
			return ((PlayerAlleyData)o).Alley;
		}

		internal static object AutoGeneratedGetMemberValueAssignedClanMember(object o)
		{
			return ((PlayerAlleyData)o).AssignedClanMember;
		}

		internal static object AutoGeneratedGetMemberValueUnderAttackBy(object o)
		{
			return ((PlayerAlleyData)o).UnderAttackBy;
		}

		internal static object AutoGeneratedGetMemberValueTroopRoster(object o)
		{
			return ((PlayerAlleyData)o).TroopRoster;
		}

		internal static object AutoGeneratedGetMemberValueLastRecruitTime(object o)
		{
			return ((PlayerAlleyData)o).LastRecruitTime;
		}

		internal static object AutoGeneratedGetMemberValueAttackResponseDueDate(object o)
		{
			return ((PlayerAlleyData)o).AttackResponseDueDate;
		}
	}

	private const int DesiredOccupiedAlleyPerTownFrequency = 2;

	private const int RelationLossWithSettlementOwnerAfterOccupyingAnAlley = -2;

	private const int RelationLossWithOldOwnerUponClearingAlley = -5;

	private const int RelationGainWithOtherNotablesUponClearingAlley = 1;

	private const float SpawningNewAlleyFightDailyPercentage = 0.015f;

	private const float ConvertTroopsToThugsDailyPercentage = 0.01f;

	private const float GainOrLoseAlleyDailyBasePercentage = 0.02f;

	private CharacterObject _thug;

	private CharacterObject _expertThug;

	private CharacterObject _masterThug;

	private List<PlayerAlleyData> _playerOwnedCommonAreaData = new List<PlayerAlleyData>();

	private bool _battleWillStartInCurrentSettlement;

	private bool _waitForBattleResults;

	private bool _playerRetreatedFromMission;

	private bool _playerDiedInMission;

	private bool _playerIsInAlleyFightMission;

	private bool _playerAbandonedAlleyFromDialogRecently;

	public override void RegisterEvents()
	{
		CampaignEvents.OnSessionLaunchedEvent.AddNonSerializedListener(this, OnSessionLaunched);
		CampaignEvents.HeroKilledEvent.AddNonSerializedListener(this, OnHeroKilled);
		CampaignEvents.LocationCharactersAreReadyToSpawnEvent.AddNonSerializedListener(this, LocationCharactersAreReadyToSpawn);
		CampaignEvents.OnNewGameCreatedPartialFollowUpEndEvent.AddNonSerializedListener(this, OnNewGameCreated);
		CampaignEvents.AlleyOccupiedByPlayer.AddNonSerializedListener(this, OnAlleyOccupiedByPlayer);
		CampaignEvents.AlleyClearedByPlayer.AddNonSerializedListener(this, OnAlleyClearedByPlayer);
		CampaignEvents.AlleyOwnerChanged.AddNonSerializedListener(this, OnAlleyOwnerChanged);
		CampaignEvents.DailyTickSettlementEvent.AddNonSerializedListener(this, DailyTickSettlement);
		CampaignEvents.DailyTickEvent.AddNonSerializedListener(this, DailyTick);
		CampaignEvents.CanHeroLeadPartyEvent.AddNonSerializedListener(this, CommonAlleyLeaderRestriction);
		CampaignEvents.CanBeGovernorOrHavePartyRoleEvent.AddNonSerializedListener(this, CommonAlleyLeaderRestriction);
		CampaignEvents.AfterMissionStarted.AddNonSerializedListener(this, OnAfterMissionStarted);
		CampaignEvents.CanHeroDieEvent.AddNonSerializedListener(this, CanHeroDie);
	}

	private void CanHeroDie(Hero hero, KillCharacterAction.KillCharacterActionDetail detail, ref bool result)
	{
		if (hero == Hero.MainHero && Mission.Current != null && _playerIsInAlleyFightMission)
		{
			result = false;
		}
	}

	private void OnAfterMissionStarted(IMission mission)
	{
		_playerIsInAlleyFightMission = false;
	}

	private void OnAlleyOwnerChanged(Alley alley, Hero newOwner, Hero oldOwner)
	{
		if (oldOwner == Hero.MainHero)
		{
			TextObject textObject = new TextObject("{=wAgfOHio}You have lost the ownership of the alley at {SETTLEMENT}.");
			textObject.SetTextVariable("SETTLEMENT", alley.Settlement.Name);
			MBInformationManager.AddQuickInformation(textObject);
		}
	}

	private void CommonAlleyLeaderRestriction(Hero hero, ref bool result)
	{
		if (_playerOwnedCommonAreaData.Any((PlayerAlleyData x) => x.AssignedClanMember == hero))
		{
			result = false;
		}
	}

	private void DailyTick()
	{
		for (int num = _playerOwnedCommonAreaData.Count - 1; num >= 0; num--)
		{
			PlayerAlleyData playerAlleyData = _playerOwnedCommonAreaData[num];
			CheckConvertTroopsToBandits(playerAlleyData);
			SkillLevelingManager.OnDailyAlleyTick(playerAlleyData.Alley, playerAlleyData.AssignedClanMember);
			if (playerAlleyData.AssignedClanMember.IsDead && playerAlleyData.AssignedClanMember.DeathDay + Campaign.Current.Models.AlleyModel.DestroyAlleyAfterDaysWhenLeaderIsDeath < CampaignTime.Now)
			{
				_playerOwnedCommonAreaData.Remove(playerAlleyData);
				playerAlleyData.DestroyAlley();
			}
			else if (!playerAlleyData.IsUnderAttack && !playerAlleyData.AssignedClanMember.IsDead)
			{
				CheckSpawningNewAlleyFight(playerAlleyData);
			}
			else if (playerAlleyData.IsUnderAttack && playerAlleyData.AttackResponseDueDate.IsPast)
			{
				_playerOwnedCommonAreaData.Remove(playerAlleyData);
				playerAlleyData.DestroyAlley();
			}
		}
	}

	private void CheckSpawningNewAlleyFight(PlayerAlleyData playerOwnedArea)
	{
		if (MBRandom.RandomFloat < 0.015f && playerOwnedArea.Alley.Settlement.Alleys.Any((Alley x) => x.State == Alley.AreaState.OccupiedByGangLeader))
		{
			StartNewAlleyAttack(playerOwnedArea);
		}
	}

	private void StartNewAlleyAttack(PlayerAlleyData playerOwnedArea)
	{
		playerOwnedArea.UnderAttackBy = playerOwnedArea.Alley.Settlement.Alleys.Where((Alley x) => x.State == Alley.AreaState.OccupiedByGangLeader).GetRandomElementInefficiently();
		playerOwnedArea.UnderAttackBy.Owner.SetHasMet();
		float alleyAttackResponseTimeInDays = Campaign.Current.Models.AlleyModel.GetAlleyAttackResponseTimeInDays(playerOwnedArea.TroopRoster);
		playerOwnedArea.AttackResponseDueDate = CampaignTime.DaysFromNow(alleyAttackResponseTimeInDays);
		TextObject textObject = new TextObject("{=5bIpeW9X}Your alley in {SETTLEMENT} is under attack from neighboring gangs. Unless you go to their help, the alley will be lost in {RESPONSE_TIME} days.");
		textObject.SetTextVariable("SETTLEMENT", playerOwnedArea.Alley.Settlement.Name);
		textObject.SetTextVariable("RESPONSE_TIME", alleyAttackResponseTimeInDays);
		ChangeRelationAction.ApplyPlayerRelation(playerOwnedArea.UnderAttackBy.Owner, -5);
		Campaign.Current.CampaignInformationManager.NewMapNoticeAdded(new AlleyUnderAttackMapNotification(playerOwnedArea.Alley, textObject));
	}

	private void CheckConvertTroopsToBandits(PlayerAlleyData playerOwnedArea)
	{
		foreach (FlattenedTroopRosterElement item in playerOwnedArea.TroopRoster.ToFlattenedRoster())
		{
			if (MBRandom.RandomFloat < 0.01f && !item.Troop.IsHero && item.Troop.Occupation != Occupation.Gangster)
			{
				playerOwnedArea.TroopRoster.RemoveTroop(item.Troop);
				CharacterObject characterObject = _thug;
				if (characterObject.Tier < item.Troop.Tier)
				{
					characterObject = _expertThug;
				}
				if (characterObject.Tier < item.Troop.Tier)
				{
					characterObject = _masterThug;
				}
				playerOwnedArea.TroopRoster.AddToCounts(characterObject, 1);
			}
		}
	}

	private void OnNewGameCreated(CampaignGameStarter gameStarter)
	{
		foreach (Town allTown in Town.AllTowns)
		{
			int num = MBRandom.RandomInt(0, allTown.Settlement.Alleys.Count);
			IEnumerable<Hero> source = allTown.Settlement.Notables.Where((Hero x) => x.IsGangLeader);
			for (int i = num; i < num + 2; i++)
			{
				allTown.Settlement.Alleys[i % allTown.Settlement.Alleys.Count].SetOwner(source.ElementAt(i % source.Count()));
			}
		}
	}

	private void DailyTickSettlement(Settlement settlement)
	{
		TickAlleyOwnerships(settlement);
	}

	private void TickAlleyOwnerships(Settlement settlement)
	{
		foreach (Hero notable in settlement.Notables)
		{
			if (!notable.IsGangLeader)
			{
				continue;
			}
			int count = notable.OwnedAlleys.Count;
			float num = 0.02f - (float)count * 0.005f;
			float num2 = (float)count * 0.005f;
			if (MBRandom.RandomFloat < num)
			{
				settlement.Alleys.FirstOrDefault((Alley x) => x.State == Alley.AreaState.Empty)?.SetOwner(notable);
			}
			if (MBRandom.RandomFloat < num2)
			{
				notable.OwnedAlleys.GetRandomElement()?.SetOwner(null);
			}
			if (!notable.IsHealthFull())
			{
				notable.Heal(10);
			}
		}
	}

	private void OnAlleyOccupiedByPlayer(Alley alley, TroopRoster troopRoster)
	{
		alley.SetOwner(Hero.MainHero);
		PlayerAlleyData playerAlleyData = new PlayerAlleyData(alley, troopRoster);
		_playerOwnedCommonAreaData.Add(playerAlleyData);
		TeleportHeroAction.ApplyDelayedTeleportToSettlement(playerAlleyData.AssignedClanMember, alley.Settlement);
		if (alley.Settlement.OwnerClan != Clan.PlayerClan)
		{
			ChangeRelationAction.ApplyPlayerRelation(alley.Settlement.Owner, -2);
		}
		SkillLevelingManager.OnAlleyCleared(alley);
		AddPlayerAlleyCharacters(alley);
		Mission.Current.ClearCorpses(isMissionReset: false);
	}

	private void OnAlleyClearedByPlayer(Alley alley)
	{
		ChangeRelationAction.ApplyPlayerRelation(alley.Owner, -5);
		foreach (Hero notable in alley.Settlement.Notables)
		{
			if (!notable.IsGangLeader)
			{
				ChangeRelationAction.ApplyPlayerRelation(notable, 1);
			}
		}
		PlayerAlleyData playerAlleyData = _playerOwnedCommonAreaData.FirstOrDefault((PlayerAlleyData x) => x.Alley.Settlement == Settlement.CurrentSettlement);
		if (playerAlleyData?.UnderAttackBy == alley)
		{
			playerAlleyData.UnderAttackBy = null;
		}
		alley.SetOwner(null);
	}

	public override void SyncData(IDataStore dataStore)
	{
		dataStore.SyncData("_playerOwnedCommonAreaData", ref _playerOwnedCommonAreaData);
	}

	public void OnSessionLaunched(CampaignGameStarter campaignGameStarter)
	{
		_thug = MBObjectManager.Instance.GetObject<CharacterObject>("gangster_1");
		_expertThug = MBObjectManager.Instance.GetObject<CharacterObject>("gangster_2");
		_masterThug = MBObjectManager.Instance.GetObject<CharacterObject>("gangster_3");
		AddGameMenus(campaignGameStarter);
		AddDialogs(campaignGameStarter);
		if (!MBSaveLoad.IsUpdatingGameVersion || !(MBSaveLoad.LastLoadedGameVersion < ApplicationVersion.FromString("v1.2.0")))
		{
			return;
		}
		foreach (PlayerAlleyData playerOwnedCommonAreaDatum in _playerOwnedCommonAreaData)
		{
			if (playerOwnedCommonAreaDatum.IsUnderAttack && playerOwnedCommonAreaDatum.UnderAttackBy.Owner == null)
			{
				playerOwnedCommonAreaDatum.UnderAttackBy = null;
			}
		}
	}

	private void LocationCharactersAreReadyToSpawn(Dictionary<string, int> unusedUsablePointCount)
	{
		Settlement currentSettlement = Settlement.CurrentSettlement;
		if (!currentSettlement.IsTown)
		{
			return;
		}
		foreach (Alley alley in currentSettlement.Alleys)
		{
			if (alley.State == Alley.AreaState.OccupiedByGangLeader)
			{
				foreach (TroopRosterElement item in Campaign.Current.Models.AlleyModel.GetTroopsOfAIOwnedAlley(alley).GetTroopRoster())
				{
					for (int i = 0; i < item.Number; i++)
					{
						AddCharacterToAlley(item.Character, alley);
					}
				}
			}
			else if (alley.State == Alley.AreaState.OccupiedByPlayer)
			{
				AddPlayerAlleyCharacters(alley);
			}
		}
	}

	private void AddPlayerAlleyCharacters(Alley alley)
	{
		if (Mission.Current != null)
		{
			for (int num = Mission.Current.Agents.Count - 1; num >= 0; num--)
			{
				Agent agent = Mission.Current.Agents[num];
				if (agent.IsHuman && !agent.Character.IsHero && agent.GetComponent<CampaignAgentComponent>()?.AgentNavigator?.MemberOfAlley?.Owner == Hero.MainHero)
				{
					agent.FadeOut(hideInstantly: false, hideMount: true);
				}
			}
		}
		foreach (TroopRosterElement item in _playerOwnedCommonAreaData.First((PlayerAlleyData x) => x.Alley == alley).TroopRoster.GetTroopRoster())
		{
			if (!item.Character.IsHero || !item.Character.HeroObject.IsTraveling)
			{
				for (int i = 0; i < item.Number; i++)
				{
					AddCharacterToAlley(item.Character, alley);
				}
			}
		}
	}

	private void AddCharacterToAlley(CharacterObject character, Alley alley)
	{
		Location locationWithId = Settlement.CurrentSettlement.LocationComplex.GetLocationWithId("center");
		LocationCharacter locationCharacter = null;
		if (character.IsHero)
		{
			Location locationOfCharacter = Settlement.CurrentSettlement.LocationComplex.GetLocationOfCharacter(character.HeroObject);
			if (locationOfCharacter != null && locationOfCharacter == locationWithId)
			{
				return;
			}
			locationCharacter = Settlement.CurrentSettlement.LocationComplex.GetLocationCharacterOfHero(character.HeroObject);
		}
		if (locationCharacter == null)
		{
			Monster monsterWithSuffix = TaleWorlds.Core.FaceGen.GetMonsterWithSuffix(character.Race, "_settlement");
			Campaign.Current.Models.AgeModel.GetAgeLimitForLocation(character, out var minimumAge, out var maximumAge, "AlleyGangMember");
			AgentData agentData = new AgentData(new SimpleAgentOrigin(character)).Monster(monsterWithSuffix).NoHorses(noHorses: true).Age(MBRandom.RandomInt(minimumAge, maximumAge));
			locationCharacter = new LocationCharacter(agentData, BehaviorSets.AddFixedCharacterBehaviors, alley.Tag, fixedLocation: true, LocationCharacter.CharacterRelations.Neutral, ActionSetCode.GenerateActionSetNameWithSuffix(agentData.AgentMonster, agentData.AgentIsFemale, "_villain"), useCivilianEquipment: true);
		}
		locationCharacter.SpecialTargetTag = alley.Tag;
		locationCharacter.SetAlleyOfCharacter(alley);
		Settlement.CurrentSettlement.LocationComplex.ChangeLocation(locationCharacter, Settlement.CurrentSettlement.LocationComplex.GetLocationOfCharacter(locationCharacter), locationWithId);
		if (character.IsHero)
		{
			CampaignEventDispatcher.Instance.OnHeroGetsBusy(character.HeroObject, HeroGetsBusyReasons.BecomeAlleyLeader);
		}
	}

	protected void AddGameMenus(CampaignGameStarter campaignGameSystemStarter)
	{
		campaignGameSystemStarter.AddGameMenuOption("town", "manage_alley", "{=VkOtMe5a}Go to alley", go_to_alley_on_condition, go_to_alley_on_consequence, isLeave: false, 5);
		campaignGameSystemStarter.AddGameMenu("manage_alley", "{=dWf6ztYu}You are in your alley by the {ALLEY_TYPE}, {FURTHER_INFO}", manage_alley_menu_on_init, GameOverlays.MenuOverlayType.SettlementWithBoth);
		campaignGameSystemStarter.AddGameMenuOption("manage_alley", "confront_hostile_alley_leader", "{=grhRXqen}Confront {HOSTILE_GANG_LEADER.NAME} about {?HOSTILE_GANG_LEADER.GENDER}her{?}his{\\?} attack on your alley.", alley_under_attack_on_condition, alley_under_attack_response_on_consequence);
		campaignGameSystemStarter.AddGameMenuOption("manage_alley", "change_leader_of_alley", "{=ClyaDhGU}Change the leader of the alley", change_leader_of_alley_on_condition, change_leader_of_the_alley_on_consequence);
		campaignGameSystemStarter.AddGameMenuOption("manage_alley", "manage_alley_troops", "{=QrBCe41Z}Manage alley troops", manage_alley_on_condition, manage_troops_of_alley);
		campaignGameSystemStarter.AddGameMenuOption("manage_alley", "abandon_alley", "{=ELfguvYD}Abandon the alley", abandon_alley_on_condition, abandon_alley_are_you_sure_consequence);
		campaignGameSystemStarter.AddGameMenu("manage_alley_abandon_are_you_sure", "{=awjomtnJ}Are you sure?", null, GameOverlays.MenuOverlayType.SettlementWithBoth);
		campaignGameSystemStarter.AddGameMenuOption("manage_alley_abandon_are_you_sure", "abandon_alley_yes", "{=aeouhelq}Yes", alley_continue_on_condition, abandon_alley_consequence);
		campaignGameSystemStarter.AddGameMenuOption("manage_alley_abandon_are_you_sure", "abandon_alley_no", "{=8OkPHu4f}No", alley_go_back_on_condition, go_to_alley_on_consequence, isLeave: true);
		campaignGameSystemStarter.AddGameMenuOption("manage_alley", "back", "{=4QNycK7T}Go back", alley_go_back_on_condition, leave_alley_menu_consequence, isLeave: true);
		campaignGameSystemStarter.AddGameMenu("alley_fight_lost", "{=po79q14T}You have failed to defend your alley against the attack, you have lost the ownership of it.", null);
		campaignGameSystemStarter.AddGameMenuOption("alley_fight_lost", "continue", "{=DM6luo3c}Continue", alley_continue_on_condition, alley_fight_continue_on_consequence);
		campaignGameSystemStarter.AddGameMenu("alley_fight_won", "{=i1sgAm0F}You have succeeded in defending your alley against the attack. You might want to leave some troops in order to compensate for your losses in the fight.", null);
		campaignGameSystemStarter.AddGameMenuOption("alley_fight_won", "continue", "{=DM6luo3c}Continue", alley_continue_on_condition, alley_fight_continue_on_consequence);
	}

	private void abandon_alley_are_you_sure_consequence(MenuCallbackArgs args)
	{
		GameMenu.SwitchToMenu("manage_alley_abandon_are_you_sure");
	}

	private bool alley_continue_on_condition(MenuCallbackArgs args)
	{
		args.optionLeaveType = GameMenuOption.LeaveType.Continue;
		return true;
	}

	private void alley_fight_continue_on_consequence(MenuCallbackArgs args)
	{
		GameMenu.SwitchToMenu("town");
	}

	private bool alley_go_back_on_condition(MenuCallbackArgs args)
	{
		args.optionLeaveType = GameMenuOption.LeaveType.Leave;
		return true;
	}

	private bool abandon_alley_on_condition(MenuCallbackArgs args)
	{
		args.optionLeaveType = GameMenuOption.LeaveType.Surrender;
		return true;
	}

	private void alley_under_attack_response_on_consequence(MenuCallbackArgs args)
	{
		PlayerAlleyData playerAlleyData = _playerOwnedCommonAreaData.First((PlayerAlleyData x) => x.Alley.Settlement == Settlement.CurrentSettlement);
		CampaignMapConversation.OpenConversation(new ConversationCharacterData(CharacterObject.PlayerCharacter), new ConversationCharacterData(playerAlleyData.UnderAttackBy.Owner.CharacterObject));
	}

	private bool alley_under_attack_on_condition(MenuCallbackArgs args)
	{
		PlayerAlleyData playerAlleyData = _playerOwnedCommonAreaData.FirstOrDefault((PlayerAlleyData x) => x.Alley.Owner == Hero.MainHero && x.Alley.Settlement == Settlement.CurrentSettlement && x.IsUnderAttack);
		if (playerAlleyData != null)
		{
			args.optionLeaveType = GameMenuOption.LeaveType.DefendAction;
			StringHelpers.SetCharacterProperties("HOSTILE_GANG_LEADER", playerAlleyData.UnderAttackBy.Owner.CharacterObject);
			TextObject textObject = new TextObject("{=9t1LGNz6}{RESPONSE_TIME} {?RESPONSE_TIME>1}days{?}day{\\?} left.");
			textObject.SetTextVariable("RESPONSE_TIME", GetResponseTimeLeftForAttackInDays(playerAlleyData.Alley));
			args.Tooltip = textObject;
			return true;
		}
		return false;
	}

	private bool manage_alley_on_condition(MenuCallbackArgs args)
	{
		if (alley_under_attack_on_condition(args))
		{
			args.IsEnabled = false;
			args.Tooltip = new TextObject("{=pdqi2qz1}You can not do this action while your alley is under attack.");
		}
		args.optionLeaveType = GameMenuOption.LeaveType.ManageGarrison;
		return true;
	}

	private bool change_leader_of_alley_on_condition(MenuCallbackArgs args)
	{
		if (alley_under_attack_on_condition(args))
		{
			args.IsEnabled = false;
			args.Tooltip = new TextObject("{=pdqi2qz1}You can not do this action while your alley is under attack.");
		}
		args.optionLeaveType = GameMenuOption.LeaveType.Continue;
		return true;
	}

	private bool go_to_alley_on_condition(MenuCallbackArgs args)
	{
		args.optionLeaveType = GameMenuOption.LeaveType.Submenu;
		return _playerOwnedCommonAreaData.Any((PlayerAlleyData x) => x.Alley.Settlement == Settlement.CurrentSettlement);
	}

	private void go_to_alley_on_consequence(MenuCallbackArgs args)
	{
		GameMenu.SwitchToMenu("manage_alley");
	}

	private void leave_alley_menu_consequence(MenuCallbackArgs args)
	{
		GameMenu.SwitchToMenu("town_outside");
	}

	private void abandon_alley_consequence(MenuCallbackArgs args)
	{
		args.optionLeaveType = GameMenuOption.LeaveType.LeaveTroopsAndFlee;
		PlayerAlleyData playerAlleyData = _playerOwnedCommonAreaData.First((PlayerAlleyData x) => x.Alley.Settlement == Settlement.CurrentSettlement);
		_playerOwnedCommonAreaData.Remove(playerAlleyData);
		playerAlleyData.AbandonTheAlley();
		GameMenu.SwitchToMenu("town_outside");
	}

	private void manage_troops_of_alley(MenuCallbackArgs args)
	{
		AlleyHelper.OpenScreenForManagingAlley(_playerOwnedCommonAreaData.First((PlayerAlleyData x) => x.Alley.Settlement == Settlement.CurrentSettlement).TroopRoster, OnPartyScreenClosed, new TextObject("{=dQBArrqh}Manage Alley"));
	}

	private bool OnPartyScreenClosed(TroopRoster leftMemberRoster, TroopRoster leftPrisonRoster, TroopRoster rightMemberRoster, TroopRoster rightPrisonRoster, FlattenedTroopRoster takenPrisonerRoster, FlattenedTroopRoster releasedPrisonerRoster, bool isForced, PartyBase leftParty, PartyBase rightParty)
	{
		PlayerAlleyData playerAlleyData = _playerOwnedCommonAreaData.First((PlayerAlleyData x) => x.Alley.Settlement == Settlement.CurrentSettlement);
		playerAlleyData.TroopRoster = leftMemberRoster;
		if (Mission.Current != null)
		{
			AddPlayerAlleyCharacters(playerAlleyData.Alley);
		}
		return true;
	}

	private void change_leader_of_the_alley_on_consequence(MenuCallbackArgs args)
	{
		AlleyHelper.CreateMultiSelectionInquiryForSelectingClanMemberToAlley(_playerOwnedCommonAreaData.First((PlayerAlleyData x) => x.Alley.Settlement == Settlement.CurrentSettlement).Alley, ChangeAssignedClanMemberOfAlley, null);
	}

	private void ChangeAssignedClanMemberOfAlley(List<InquiryElement> newClanMemberInquiryElement)
	{
		PlayerAlleyData alleyData = _playerOwnedCommonAreaData.First((PlayerAlleyData x) => x.Alley.Settlement == Settlement.CurrentSettlement);
		Hero heroObject = (newClanMemberInquiryElement.First().Identifier as CharacterObject).HeroObject;
		ChangeTheLeaderOfAlleyInternal(alleyData, heroObject);
	}

	private void manage_alley_menu_on_init(MenuCallbackArgs args)
	{
		Campaign.Current.GameMenuManager.MenuLocations.Clear();
		Campaign.Current.GameMenuManager.MenuLocations.Add(Settlement.CurrentSettlement.LocationComplex.GetLocationWithId("alley"));
		PlayerAlleyData playerAlleyData = _playerOwnedCommonAreaData.FirstOrDefault((PlayerAlleyData x) => x.Alley.Settlement == Settlement.CurrentSettlement);
		if (playerAlleyData == null)
		{
			GameMenu.SwitchToMenu(_playerAbandonedAlleyFromDialogRecently ? "town" : "alley_fight_lost");
			_playerAbandonedAlleyFromDialogRecently = false;
			return;
		}
		MBTextManager.SetTextVariable("ALLEY_TYPE", playerAlleyData.Alley.Name);
		TextObject empty = TextObject.Empty;
		if (playerAlleyData.AssignedClanMember.IsTraveling)
		{
			empty = new TextObject("{=AjBYneFr}{CLAN_MEMBER.NAME} is in charge of the alley. {?CLAN_MEMBER.GENDER}She{?}He{\\?} is currently traveling to the alley and will arrive after {HOURS} {?HOURS > 1}hours{?}hour{\\?}.");
			int variable = TaleWorlds.Library.MathF.Ceiling(TeleportationHelper.GetHoursLeftForTeleportingHeroToReachItsDestination(playerAlleyData.AssignedClanMember));
			empty.SetTextVariable("HOURS", variable);
			MBTextManager.SetTextVariable("FURTHER_INFO", empty);
		}
		else if (playerAlleyData.AssignedClanMember.IsDead)
		{
			empty = new TextObject("{=P5UbgK4c}{CLAN_MEMBER.NAME} was in charge of the alley. {?CLAN_MEMBER.GENDER}She{?}He{\\?} is dead. Alley will be abandoned after {REMAINING_DAYS} {?REMAINING_DAYS>1}days{?}day{\\?} unless a new overseer is assigned.");
			empty.SetTextVariable("REMAINING_DAYS", (int)Math.Ceiling((playerAlleyData.AssignedClanMember.DeathDay + Campaign.Current.Models.AlleyModel.DestroyAlleyAfterDaysWhenLeaderIsDeath - CampaignTime.Now).ToDays));
			MBTextManager.SetTextVariable("FURTHER_INFO", empty);
		}
		else
		{
			TextObject text = new TextObject("{=fcqdfY09}{CLAN_MEMBER.NAME} is in charge of the alley.");
			MBTextManager.SetTextVariable("FURTHER_INFO", text);
		}
		StringHelpers.SetCharacterProperties("CLAN_MEMBER", playerAlleyData.AssignedClanMember.CharacterObject);
		if (_waitForBattleResults)
		{
			_waitForBattleResults = false;
			playerAlleyData.TroopRoster.AddToCounts(CharacterObject.PlayerCharacter, -1, insertAtFront: true);
			if ((playerAlleyData.TroopRoster.TotalManCount == 0 && _playerDiedInMission) || _playerRetreatedFromMission)
			{
				_playerOwnedCommonAreaData.Remove(playerAlleyData);
				playerAlleyData.AlleyFightLost();
			}
			else
			{
				playerAlleyData.AlleyFightWon();
			}
			_playerRetreatedFromMission = false;
			_playerDiedInMission = false;
		}
		if (_battleWillStartInCurrentSettlement)
		{
			StartAlleyFightWithOtherAlley();
		}
	}

	private void StartAlleyFightWithOtherAlley()
	{
		PlayerAlleyData playerAlleyData = _playerOwnedCommonAreaData.First((PlayerAlleyData x) => x.Alley.Settlement == Settlement.CurrentSettlement);
		TroopRoster troopRoster = playerAlleyData.TroopRoster;
		if (playerAlleyData.AssignedClanMember.IsTraveling)
		{
			troopRoster.RemoveTroop(playerAlleyData.AssignedClanMember.CharacterObject);
		}
		troopRoster.AddToCounts(CharacterObject.PlayerCharacter, 1, insertAtFront: true);
		TroopRoster troopsOfAlleyForBattleMission = Campaign.Current.Models.AlleyModel.GetTroopsOfAlleyForBattleMission(playerAlleyData.UnderAttackBy);
		int wallLevel = Settlement.CurrentSettlement.Town.GetWallLevel();
		string scene = Settlement.CurrentSettlement.LocationComplex.GetScene("center", wallLevel);
		Location locationWithId = LocationComplex.Current.GetLocationWithId("center");
		CampaignMission.OpenAlleyFightMission(scene, wallLevel, locationWithId, troopRoster, troopsOfAlleyForBattleMission);
		_battleWillStartInCurrentSettlement = false;
		_waitForBattleResults = true;
	}

	protected void AddDialogs(CampaignGameStarter campaignGameStarter)
	{
		campaignGameStarter.AddDialogLine("alley_talk_start_player_owned_thug", "start", "alley_player_owned_start_thug", "{=!}{FURTHER_DETAIL}", alley_talk_player_owned_thug_on_condition, null, 120);
		campaignGameStarter.AddPlayerLine("alley_talk_start_player_owned_thug_answer", "alley_player_owned_start_thug", "close_window", "{=GvpvZEba}Very well, take care.", null, null, 120);
		campaignGameStarter.AddDialogLine("alley_talk_start_player_owned_alley_manager_not_under_attack", "start", "alley_player_owned_start", "{=cwqR0pp1}Greetings my {?PLAYER.GENDER}lady{?}lord{\\?}. It's good to see you here. How can I help you?", alley_talk_player_owned_alley_managed_not_under_attack_on_condition, null, 120);
		campaignGameStarter.AddDialogLine("alley_talk_start_player_owned_alley_manager_under_attack", "start", "close_window", "{=jaFWM6sN}Good to have you here, my {?PLAYER.GENDER}lady{?}lord{\\?}. We shall raze them down now.", alley_talk_player_owned_alley_managed_common_condition, null, 120);
		campaignGameStarter.AddPlayerLine("alley_talk_start_player_owned_alley_manager_answer_1", "alley_player_owned_start", "alley_manager_general_answer", "{=xJJeXW6j}Let me inspect your troops.", null, manage_troops_of_alley_from_dialog);
		campaignGameStarter.AddPlayerLine("alley_talk_start_player_owned_alley_manager_answer_2", "alley_player_owned_start", "player_asked_for_volunteers", "{=ah3WKIc8}I could use some more troops in my party. Have you found any volunteers?", null, null);
		campaignGameStarter.AddPlayerLine("alley_talk_start_player_owned_alley_manager_answer_3", "alley_player_owned_start", "alley_manager_general_answer", "{=ut26sd6p}I want somebody else to take charge of this place.", null, change_leader_of_alley_from_dialog);
		campaignGameStarter.AddPlayerLine("alley_talk_start_player_owned_alley_manager_answer_4", "alley_player_owned_start", "abandon_alley_are_you_sure", "{=I8o7oarw}I want to abandon this area.", null, null);
		campaignGameStarter.AddDialogLine("alley_talk_start_player_owned_alley_manager_answer_4_1", "abandon_alley_are_you_sure", "abandon_alley_are_you_sure_player", "{=6dDXb4iI}Are you sure? If you are, we can pack up and join you.", null, null);
		campaignGameStarter.AddPlayerLine("alley_talk_start_player_owned_alley_manager_answer_4_2", "abandon_alley_are_you_sure_player", "start", "{=ALWqXMiP}Yes, I am sure.", null, abandon_alley_from_dialog_consequence);
		campaignGameStarter.AddPlayerLine("alley_talk_start_player_owned_alley_manager_answer_4_3", "abandon_alley_are_you_sure_player", "start", "{=YJkiQ6nM}No, I have changed my mind. We will stay here.", null, null);
		campaignGameStarter.AddPlayerLine("alley_talk_start_player_owned_alley_manager_answer_5", "alley_player_owned_start", "close_window", "{=D33fIGQe}Never mind.", null, null);
		campaignGameStarter.AddDialogLine("alley_talk_start_player_owned_alley_manager_volunteers_1", "player_asked_for_volunteers", "alley_player_owned_start", "{=nRVrXSbv}Not yet my {?PLAYER.GENDER}lady{?}lord{\\?}, but I am working on it. Better check back next week.", alley_has_no_troops_to_recruit, null);
		campaignGameStarter.AddDialogLine("alley_talk_start_player_owned_alley_manager_volunteers_2", "player_asked_for_volunteers", "alley_player_ask_for_troops", "{=aLrK7Si7}Yes. I have {TROOPS_TO_RECRUIT} ready to join you.", get_troops_to_recruit_from_alley, null);
		campaignGameStarter.AddPlayerLine("alley_talk_start_player_owned_alley_manager_volunteers_3", "alley_player_ask_for_troops", "give_troops_to_player", "{=BNz4ZA6S}Very well. Have them join me now.", null, player_recruited_troops_from_alley);
		campaignGameStarter.AddDialogLine("alley_talk_start_player_owned_alley_manager_volunteers_4", "give_troops_to_player", "start", "{=PlIYRSIz}All right my {?PLAYER.GENDER}lady{?}lord{\\?}, they will be ready.", null, null);
		campaignGameStarter.AddPlayerLine("alley_talk_start_player_owned_alley_manager_volunteers_5", "alley_player_ask_for_troops", "start", "{=n1qrbQVa}I don't need them right now.", null, null);
		campaignGameStarter.AddDialogLine("alley_talk_start_player_owned_alley_manager_answer_2_di", "alley_manager_general_answer", "start", "{=lF5HkBDy}As you wish.", null, null);
		campaignGameStarter.AddDialogLine("alley_talk_start_normal", "start", "alley_talk_start", "{=qT4nbaAY}Oi, you, what are you doing here?", alley_talk_start_normal_on_condition, null, 120);
		campaignGameStarter.AddDialogLine("alley_talk_start_normal_2", "start", "alley_talk_start_confront", "{=MzHbdTYe}Well well well, I wasn't expecting to see you there. There must be some little birds informing you about my plans. That won't change anything, though. I'll still crush you.", alley_confront_dialog_on_condition, null);
		campaignGameStarter.AddPlayerLine("alley_talk_start_normal_3", "alley_talk_start_confront", "close_window", "{=GMsZZQzI}Bring it on.", null, start_alley_fight_after_conversation);
		campaignGameStarter.AddPlayerLine("alley_talk_start_normal_4", "alley_talk_start_confront", "close_window", "{=QNpuyzc4}Take it easy. I have no interest in the place any more. Take it.", null, abandon_alley_from_dialog_consequence, 100, alley_abandon_while_under_attack_clickable_condition);
		campaignGameStarter.AddPlayerLine("alley_start_1", "alley_talk_start", "alley_activity", "{=1NSRPYZt}Just passing through. What goes on here?", null, null);
		campaignGameStarter.AddPlayerLine("alley_start_2", "alley_talk_start", "first_entry_to_alley_2", "{=HCmQmZbe}I'm just having a look. Do you mind?", null, null);
		campaignGameStarter.AddPlayerLine("alley_start_3", "alley_talk_start", "close_window", "{=iW9iKbb8}Nothing.", null, null);
		campaignGameStarter.AddPlayerLine("alley_entry_start_1", "alley_first_talk_start", "first_entry_to_alley_2", "{=X18yfvX7}Just passing through.", null, null);
		campaignGameStarter.AddPlayerLine("alley_entry_start_2", "alley_first_talk_start", "first_entry_to_alley_2", "{=Y1O5bPpJ}Having a look. Do you mind?", null, null);
		campaignGameStarter.AddPlayerLine("alley_entry_start_3", "alley_first_talk_start", "first_entry_to_alley_2", "{=eQfL2UmE}None of your business.", null, null);
		campaignGameStarter.AddDialogLine("first_entry_to_alley", "first_entry_to_alley_2", "alley_options", "{=Ll2wN2Gm}This is how it goes, friend. This is our turf. We answer to {ALLEY_BOSS.NAME}, and {?ALLEY_BOSS.GENDER}she's{?}he's{\\?} like the {?ALLEY_BOSS.GENDER}queen{?}king{\\?} here. So if you haven't got a good reason to be here, clear out.", enter_alley_rude_on_occasion, null);
		campaignGameStarter.AddDialogLine("first_entry_to_alley_friendly", "first_entry_to_alley_2", "alley_options", "{=Fo47BuSY}Fine, you know {ALLEY_BOSS.NAME}, you can be here. Just no trouble, you understand?", null, null);
		campaignGameStarter.AddPlayerLine("ally_entry_start_fight", "alley_options", "alley_fight_start", "{=2Fxva3RY}I don't take orders from the likes of you.", null, start_alley_fight_on_consequence);
		campaignGameStarter.AddPlayerLine("alley_entry_question_activity", "alley_options", "alley_activity", "{=aNZKqAAS}So what goes on here?", null, null);
		campaignGameStarter.AddPlayerLine("alley_entry_end_conversation", "alley_options", "close_window", "{=Mk3Qfb4D}I don't want any trouble. Later.", null, null);
		campaignGameStarter.AddDialogLine("alley_fight_start", "alley_fight_start", "close_window", "{=EN3Zqyx5}A mouthy one, eh? At him, lads![ib:aggressive][if:idle_angry][ib:normal]", null, null);
		campaignGameStarter.AddDialogLine("alley_activity", "alley_activity", "alley_activity_2", "{=bZ5rXBY5}{ALLEY_ACTIVITY_STRING}", alley_activity_on_condition, null);
		campaignGameStarter.AddDialogLine("alley_activity_2", "alley_activity_2", "alley_options_player", "{=eZq11NVD}And by the way, we take orders from {ALLEY_BOSS.NAME}, and no one else.", alley_activity_2_on_condition, null);
		campaignGameStarter.AddDialogLine("alley_activity_back", "alley_options_decline", "alley_options", "{=pf4EIcBQ}Anything else? Because unless you've got business here, maybe you'd best move along.[ib:closed][ib:normal]", null, null);
		campaignGameStarter.AddDialogLine("alley_activity_end", "alley_options_player", "close_window", "{=xb1Ps6ZC}Now get lost...", null, null);
		campaignGameStarter.AddDialogLine("alley_meet_boss", "alley_meet_boss", "close_window", "{=NoxFbtEa}Wait here. We'll see if {?ALLEY_BOSS.GENDER}she{?}he{\\?} wants to talk to you. (NOT IMPLEMENTED)", null, null);
		campaignGameStarter.AddDialogLine("gang_leader_bodyguard_start", "start", "close_window", "{=NVvfxdIc}You best talk to the boss.", gang_leader_bodyguard_on_condition, null, 200);
	}

	private bool alley_abandon_while_under_attack_clickable_condition(out TextObject explanation)
	{
		explanation = new TextObject("{=3E1XVyGM}You will lose the ownership of the alley.");
		return true;
	}

	private bool alley_confront_dialog_on_condition()
	{
		PlayerAlleyData playerAlleyData = _playerOwnedCommonAreaData.FirstOrDefault((PlayerAlleyData x) => x.Alley.Settlement == Settlement.CurrentSettlement);
		if (playerAlleyData != null && playerAlleyData.IsUnderAttack)
		{
			return playerAlleyData.UnderAttackBy.Owner == Hero.OneToOneConversationHero;
		}
		return false;
	}

	private void start_alley_fight_after_conversation()
	{
		_battleWillStartInCurrentSettlement = true;
		Campaign.Current.GameMenuManager.SetNextMenu("manage_alley");
		if (Mission.Current != null)
		{
			Mission.Current.EndMission();
		}
	}

	private void player_recruited_troops_from_alley()
	{
		PlayerAlleyData playerAlleyData = _playerOwnedCommonAreaData.First((PlayerAlleyData x) => x.Alley.Settlement == Settlement.CurrentSettlement);
		foreach (TroopRosterElement item in Campaign.Current.Models.AlleyModel.GetTroopsToRecruitFromAlleyDependingOnAlleyRandom(playerAlleyData.Alley, playerAlleyData.RandomFloatWeekly).GetTroopRoster())
		{
			MobileParty.MainParty.MemberRoster.AddToCounts(item.Character, item.Number);
		}
		MBInformationManager.AddQuickInformation(new TextObject("{=8CW2y0p3}Troops have been joined to your party"));
		playerAlleyData.LastRecruitTime = CampaignTime.Now;
	}

	private bool get_troops_to_recruit_from_alley()
	{
		PlayerAlleyData playerAlleyData = _playerOwnedCommonAreaData.First((PlayerAlleyData x) => x.Alley.Settlement == Settlement.CurrentSettlement);
		TroopRoster troopsToRecruitFromAlleyDependingOnAlleyRandom = Campaign.Current.Models.AlleyModel.GetTroopsToRecruitFromAlleyDependingOnAlleyRandom(playerAlleyData.Alley, playerAlleyData.RandomFloatWeekly);
		List<TextObject> list = new List<TextObject>();
		foreach (TroopRosterElement item in troopsToRecruitFromAlleyDependingOnAlleyRandom.GetTroopRoster())
		{
			TextObject textObject = new TextObject("{=!}{TROOP_COUNT} {?TROOP_COUNT > 1}{TROOP_NAME}{.s}{?}{TROOP_NAME}{\\?}");
			textObject.SetTextVariable("TROOP_COUNT", item.Number);
			textObject.SetTextVariable("TROOP_NAME", item.Character.Name);
			list.Add(textObject);
		}
		TextObject text = GameTexts.GameTextHelper.MergeTextObjectsWithComma(list, includeAnd: true);
		MBTextManager.SetTextVariable("TROOPS_TO_RECRUIT", text);
		return true;
	}

	private bool alley_has_no_troops_to_recruit()
	{
		return _playerOwnedCommonAreaData.First((PlayerAlleyData x) => x.Alley.Settlement == Settlement.CurrentSettlement).RandomFloatWeekly > 0.5f;
	}

	private void change_leader_of_alley_from_dialog()
	{
		AlleyHelper.CreateMultiSelectionInquiryForSelectingClanMemberToAlley(_playerOwnedCommonAreaData.First((PlayerAlleyData x) => x.Alley.Settlement == Settlement.CurrentSettlement).Alley, ChangeAssignedClanMemberOfAlley, null);
	}

	private void manage_troops_of_alley_from_dialog()
	{
		AlleyHelper.OpenScreenForManagingAlley(_playerOwnedCommonAreaData.First((PlayerAlleyData x) => x.Alley.Settlement == Settlement.CurrentSettlement).TroopRoster, OnPartyScreenClosed, new TextObject("{=dQBArrqh}Manage Alley"));
	}

	private void abandon_alley_from_dialog_consequence()
	{
		PlayerAlleyData playerAlleyData = _playerOwnedCommonAreaData.First((PlayerAlleyData x) => x.Alley.Settlement == Settlement.CurrentSettlement);
		if (Mission.Current != null)
		{
			for (int num = Mission.Current.Agents.Count - 1; num >= 0; num--)
			{
				Agent agent = Mission.Current.Agents[num];
				if (agent.IsHuman && agent.GetComponent<CampaignAgentComponent>()?.AgentNavigator?.MemberOfAlley?.Owner == Hero.MainHero && Hero.OneToOneConversationHero.CharacterObject != agent.Character)
				{
					agent.FadeOut(hideInstantly: false, hideMount: true);
				}
			}
		}
		_playerOwnedCommonAreaData.Remove(playerAlleyData);
		playerAlleyData.AbandonTheAlley();
		if (Mission.Current != null && playerAlleyData.Alley.Owner != null)
		{
			foreach (TroopRosterElement item in Campaign.Current.Models.AlleyModel.GetTroopsOfAIOwnedAlley(playerAlleyData.Alley).GetTroopRoster())
			{
				for (int i = 0; i < item.Number; i++)
				{
					AddCharacterToAlley(item.Character, playerAlleyData.Alley);
				}
			}
		}
		_playerAbandonedAlleyFromDialogRecently = true;
	}

	private bool alley_talk_player_owned_alley_managed_not_under_attack_on_condition()
	{
		PlayerAlleyData playerAlleyData = _playerOwnedCommonAreaData.FirstOrDefault((PlayerAlleyData x) => x.Alley.Settlement == Settlement.CurrentSettlement);
		if (playerAlleyData != null && !playerAlleyData.IsUnderAttack)
		{
			return alley_talk_player_owned_alley_managed_common_condition();
		}
		return false;
	}

	private bool alley_talk_player_owned_alley_managed_common_condition()
	{
		PlayerAlleyData playerAlleyData = _playerOwnedCommonAreaData.FirstOrDefault((PlayerAlleyData x) => x.Alley.Settlement == Settlement.CurrentSettlement);
		if (playerAlleyData != null)
		{
			return playerAlleyData.AssignedClanMember == Hero.OneToOneConversationHero;
		}
		return false;
	}

	private bool alley_talk_player_owned_thug_on_condition()
	{
		if (!CharacterObject.OneToOneConversationCharacter.IsHero)
		{
			PlayerAlleyData playerAlleyData = _playerOwnedCommonAreaData.FirstOrDefault((PlayerAlleyData x) => x.Alley.Settlement == Settlement.CurrentSettlement);
			if (playerAlleyData != null)
			{
				CampaignAgentComponent component = ((Agent)Campaign.Current.ConversationManager.OneToOneConversationAgent).GetComponent<CampaignAgentComponent>();
				if (component != null && component.AgentNavigator.MemberOfAlley == playerAlleyData.Alley)
				{
					if (playerAlleyData.IsAssignedClanMemberDead)
					{
						TextObject text = new TextObject("{=SdKTUIVJ}Oi, my {?PLAYER.GENDER}lady{?}lord{\\?}. Sorry for your loss, {DEAD_ALLEY_LEADER.NAME} will be missed in these streets. We are waiting for you to appoint a new boss, whenever you’re ready.");
						StringHelpers.SetCharacterProperties("DEAD_ALLEY_LEADER", playerAlleyData.AssignedClanMember.CharacterObject);
						MBTextManager.SetTextVariable("FURTHER_DETAIL", text);
					}
					else if (playerAlleyData.AssignedClanMember.IsTraveling)
					{
						TextObject text2 = new TextObject("{=KKvOQAVa}We are waiting for {TRAVELING_ALLEY_LEADER.NAME} to come. Until {?TRAVELING_ALLEY_LEADER.GENDER}she{?}he{\\?} arrives, we'll be extra watchful.");
						StringHelpers.SetCharacterProperties("TRAVELING_ALLEY_LEADER", playerAlleyData.AssignedClanMember.CharacterObject);
						MBTextManager.SetTextVariable("FURTHER_DETAIL", text2);
					}
					else
					{
						TextObject text3 = new TextObject("{=OPwO5RXC}Welcome, boss. We're honored to have you here. You can be sure we're keeping an eye on everything going on.");
						MBTextManager.SetTextVariable("FURTHER_DETAIL", text3);
					}
					return true;
				}
			}
		}
		return false;
	}

	private bool alley_activity_on_condition()
	{
		List<TextObject> list = new List<TextObject>();
		Alley lastVisitedAlley = CampaignMission.Current.LastVisitedAlley;
		if (lastVisitedAlley.Owner.GetTraitLevel(DefaultTraits.Thug) > 0)
		{
			list.Add(new TextObject("{=prJBRboS}we look after the honest folk here. Make sure no one smashes up their shops. And if they want to give us a coin or two as a way of saying thanks, well, who'd mind?"));
		}
		if (lastVisitedAlley.Owner.GetTraitLevel(DefaultTraits.Smuggler) > 0)
		{
			list.Add(new TextObject("{=CqnAGehj}suppose someone wanted to buy some goods and didn't want to pay the customs tax. We might be able to help that person out."));
		}
		if (lastVisitedAlley.Owner.Gold > 100)
		{
			list.Add(new TextObject("{=U8iyCXmF}we help out those who are down on their luck. Give 'em a purse of silver to tide them by. With a bit of speculative interest, naturally."));
		}
		MBTextManager.SetTextVariable("ALLEY_ACTIVITY_STRING", "{=1rCk6xRa}Now then... If you're asking,[ib:normal]");
		for (int i = 0; i < list.Count; i++)
		{
			MBTextManager.SetTextVariable("ALLEY_ACTIVITY_ADDITION", list[i].ToString());
			MBTextManager.SetTextVariable("ALLEY_ACTIVITY_STRING", new TextObject("{=jVjIkODa}{ALLEY_ACTIVITY_STRING} {ALLEY_ACTIVITY_ADDITION}").ToString());
			if (i + 1 != list.Count)
			{
				MBTextManager.SetTextVariable("ALLEY_ACTIVITY_ADDITION", "{=lbNl0a8t}Also,");
				MBTextManager.SetTextVariable("ALLEY_ACTIVITY_STRING", new TextObject("{=jVjIkODa}{ALLEY_ACTIVITY_STRING} {ALLEY_ACTIVITY_ADDITION}").ToString());
			}
		}
		return true;
	}

	private bool alley_activity_2_on_condition()
	{
		StringHelpers.SetCharacterProperties("ALLEY_BOSS", CampaignMission.Current.LastVisitedAlley.Owner.CharacterObject);
		return true;
	}

	private bool alley_talk_start_normal_on_condition()
	{
		AgentNavigator agentNavigator = ConversationMission.OneToOneConversationAgent?.GetComponent<CampaignAgentComponent>().AgentNavigator;
		if (agentNavigator?.MemberOfAlley != null && agentNavigator.MemberOfAlley.State == Alley.AreaState.OccupiedByGangLeader && agentNavigator.MemberOfAlley.Owner != Hero.MainHero)
		{
			CampaignMission.Current.LastVisitedAlley = agentNavigator.MemberOfAlley;
			return true;
		}
		return false;
	}

	private bool enter_alley_rude_on_occasion()
	{
		Hero owner = (ConversationMission.OneToOneConversationAgent?.GetComponent<CampaignAgentComponent>().AgentNavigator.MemberOfAlley).Owner;
		float relationWithPlayer = owner.GetRelationWithPlayer();
		StringHelpers.SetCharacterProperties("ALLEY_BOSS", owner.CharacterObject);
		if (owner.HasMet)
		{
			return relationWithPlayer < -5f;
		}
		return true;
	}

	private void start_alley_fight_on_consequence()
	{
		_playerIsInAlleyFightMission = true;
		Campaign.Current.ConversationManager.ConversationEndOneShot += delegate
		{
			Mission.Current.GetMissionBehavior<MissionAlleyHandler>().StartCommonAreaBattle(CampaignMission.Current.LastVisitedAlley);
		};
		LogEntry.AddLogEntry(new PlayerAttackAlleyLogEntry(CampaignMission.Current.LastVisitedAlley.Owner, Hero.MainHero.CurrentSettlement));
	}

	private bool gang_leader_bodyguard_on_condition()
	{
		if (Settlement.CurrentSettlement != null)
		{
			return CharacterObject.OneToOneConversationCharacter == Settlement.CurrentSettlement.Culture.GangleaderBodyguard;
		}
		return false;
	}

	private void OnHeroKilled(Hero victim, Hero killer, KillCharacterAction.KillCharacterActionDetail detail, bool showNotification)
	{
		PlayerAlleyData playerAlleyData = _playerOwnedCommonAreaData.FirstOrDefault((PlayerAlleyData x) => x.AssignedClanMember == victim);
		if (playerAlleyData != null)
		{
			playerAlleyData.TroopRoster.RemoveTroop(victim.CharacterObject);
			Campaign.Current.CampaignInformationManager.NewMapNoticeAdded(new AlleyLeaderDiedMapNotification(playerAlleyData.Alley, new TextObject("{=EAPYyktd}One of your alleys has lost its leader or is lacking troops")));
		}
		foreach (PlayerAlleyData playerOwnedCommonAreaDatum in _playerOwnedCommonAreaData)
		{
			if (playerOwnedCommonAreaDatum.IsUnderAttack && playerOwnedCommonAreaDatum.UnderAttackBy.Owner == victim)
			{
				playerOwnedCommonAreaDatum.UnderAttackBy = null;
			}
		}
		if (victim.Clan == Clan.PlayerClan)
		{
			return;
		}
		foreach (Alley item in victim.OwnedAlleys.ToList())
		{
			item.SetOwner(null);
		}
	}

	public bool GetIsAlleyUnderAttack(Alley alley)
	{
		return _playerOwnedCommonAreaData.FirstOrDefault((PlayerAlleyData x) => x.Alley == alley)?.IsUnderAttack ?? false;
	}

	public int GetPlayerOwnedAlleyTroopCount(Alley alley)
	{
		return _playerOwnedCommonAreaData.FirstOrDefault((PlayerAlleyData x) => x.Alley == alley).TroopRoster.TotalRegulars;
	}

	public int GetResponseTimeLeftForAttackInDays(Alley alley)
	{
		return (int)_playerOwnedCommonAreaData.First((PlayerAlleyData x) => x.Alley == alley).AttackResponseDueDate.RemainingDaysFromNow;
	}

	public void AbandonAlleyFromClanMenu(Alley alley)
	{
		PlayerAlleyData playerAlleyData = _playerOwnedCommonAreaData.FirstOrDefault((PlayerAlleyData x) => x.Alley == alley);
		_playerOwnedCommonAreaData.Remove(playerAlleyData);
		playerAlleyData?.AbandonTheAlley(fromClanScreen: true);
	}

	public bool IsHeroAlleyLeaderOfAnyPlayerAlley(Hero hero)
	{
		return _playerOwnedCommonAreaData.Any((PlayerAlleyData x) => x.AssignedClanMember == hero);
	}

	public List<Hero> GetAllAssignedClanMembersForOwnedAlleys()
	{
		return _playerOwnedCommonAreaData.Select((PlayerAlleyData x) => x.AssignedClanMember).ToList();
	}

	public void ChangeAlleyMember(Alley alley, Hero newAlleyLead)
	{
		PlayerAlleyData alleyData = _playerOwnedCommonAreaData.FirstOrDefault((PlayerAlleyData x) => x.Alley == alley);
		ChangeTheLeaderOfAlleyInternal(alleyData, newAlleyLead);
	}

	public void OnPlayerRetreatedFromMission()
	{
		_playerRetreatedFromMission = true;
	}

	public void OnPlayerDiedInMission()
	{
		_playerDiedInMission = true;
	}

	public Hero GetAssignedClanMemberOfAlley(Alley alley)
	{
		return _playerOwnedCommonAreaData.FirstOrDefault((PlayerAlleyData x) => x.Alley == alley)?.AssignedClanMember;
	}

	private void ChangeTheLeaderOfAlleyInternal(PlayerAlleyData alleyData, Hero newLeader)
	{
		Hero assignedClanMember = alleyData.AssignedClanMember;
		alleyData.AssignedClanMember = newLeader;
		if (!assignedClanMember.IsDead)
		{
			alleyData.TroopRoster.RemoveTroop(assignedClanMember.CharacterObject);
		}
		alleyData.TroopRoster.AddToCounts(newLeader.CharacterObject, 1, insertAtFront: true);
		TeleportHeroAction.ApplyDelayedTeleportToSettlement(newLeader, alleyData.Alley.Settlement);
		if (Campaign.Current.CurrentMenuContext != null)
		{
			Campaign.Current.CurrentMenuContext.Refresh();
		}
	}

	[GameMenuInitializationHandler("manage_alley")]
	[GameMenuInitializationHandler("alley_fight_lost")]
	[GameMenuInitializationHandler("alley_fight_won")]
	[GameMenuInitializationHandler("manage_alley_abandon_are_you_sure")]
	public static void alley_related_menu_on_init(MenuCallbackArgs args)
	{
		string backgroundMeshName = Settlement.CurrentSettlement.Culture.StringId + "_alley";
		args.MenuContext.SetBackgroundMeshName(backgroundMeshName);
	}
}
