using System.ComponentModel;
using TaleWorlds.CampaignSystem.ViewModelCollection.Map;
using TaleWorlds.CampaignSystem.ViewModelCollection.Map.MapNotificationTypes;
using TaleWorlds.GauntletUI;
using TaleWorlds.GauntletUI.BaseTypes;
using TaleWorlds.GauntletUI.Data;
using TaleWorlds.GauntletUI.GamepadNavigation;
using TaleWorlds.GauntletUI.Layout;
using TaleWorlds.Library;
using TaleWorlds.MountAndBlade.GauntletUI.Widgets;
using TaleWorlds.MountAndBlade.GauntletUI.Widgets.Map.Notification;

namespace SandBox.GauntletUI.AutoGenerated0;

public class MapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM : ListPanel, IGeneratedGauntletMovieRoot
{
	private ListPanel _widget;

	private BrushWidget _widget_0;

	private TextWidget _widget_0_0;

	private NavigationScopeTargeter _widget_1;

	private MapNotificationContainerWidget _widget_2;

	private MapNotificationVM _datasource_Root;

	private MBBindingList<MapNotificationItemBaseVM> _datasource_Root_NotificationItems;

	public MapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM(UIContext context)
		: base(context)
	{
	}

	public void CreateWidgets()
	{
		_widget = this;
		_widget_0 = new BrushWidget(base.Context);
		_widget.AddChild(_widget_0);
		_widget_0_0 = new TextWidget(base.Context);
		_widget_0.AddChild(_widget_0_0);
		_widget_1 = new NavigationScopeTargeter(base.Context);
		_widget.AddChild(_widget_1);
		_widget_2 = new MapNotificationContainerWidget(base.Context);
		_widget.AddChild(_widget_2);
	}

	public void SetIds()
	{
		base.Id = "MapNotificationWidget";
		_widget_0.Id = "MoreTextWidgetContainer";
		_widget_0_0.Id = "MoreTextWidget";
		_widget_2.Id = "Notifications";
	}

	public void SetAttributes()
	{
		base.WidthSizePolicy = SizePolicy.Fixed;
		base.HeightSizePolicy = SizePolicy.CoverChildren;
		base.SuggestedWidth = 300f;
		base.HorizontalAlignment = HorizontalAlignment.Right;
		base.VerticalAlignment = VerticalAlignment.Bottom;
		base.MarginBottom = 310f;
		base.DoNotAcceptEvents = true;
		base.StackLayout.LayoutMethod = LayoutMethod.VerticalBottomToTop;
		_widget_0.WidthSizePolicy = SizePolicy.Fixed;
		_widget_0.HeightSizePolicy = SizePolicy.Fixed;
		_widget_0.SuggestedWidth = 60f;
		_widget_0.SuggestedHeight = 50f;
		_widget_0.MarginRight = 15f;
		_widget_0.HorizontalAlignment = HorizontalAlignment.Right;
		_widget_0.VerticalAlignment = VerticalAlignment.Center;
		_widget_0.Brush = base.Context.GetBrush("Map.Notification.More.Panel");
		_widget_0.IsVisible = false;
		_widget_0_0.WidthSizePolicy = SizePolicy.StretchToParent;
		_widget_0_0.HeightSizePolicy = SizePolicy.StretchToParent;
		_widget_0_0.Brush = base.Context.GetBrush("Map.Notification.More.Text");
		_widget_1.ScopeID = "NotificationScope";
		_widget_1.ScopeParent = _widget_2;
		_widget_1.ScopeMovements = GamepadNavigationTypes.Vertical;
		_widget_1.ExtendDiscoveryAreaLeft = 200f;
		_widget_1.ForceGainNavigationOnClosestChild = true;
		_widget_1.DoNotAutoNavigateAfterSort = true;
		_widget_2.WidthSizePolicy = SizePolicy.CoverChildren;
		_widget_2.HeightSizePolicy = SizePolicy.Fixed;
		_widget_2.SuggestedHeight = 560f;
		_widget_2.VerticalAlignment = VerticalAlignment.Bottom;
		_widget_2.DoNotAcceptEvents = true;
		_widget_2.MaxAmountOfNotificationsToShow = 5;
		_widget_2.MoreTextWidgetContainer = _widget_0;
		_widget_2.MoreTextWidget = _widget_0_0;
	}

	public void RefreshBindingWithChildren()
	{
		MapNotificationVM datasource_Root = _datasource_Root;
		SetDataSource(null);
		SetDataSource(datasource_Root);
	}

	public void DestroyDataSource()
	{
		if (_datasource_Root == null)
		{
			return;
		}
		_datasource_Root.PropertyChanged -= ViewModelPropertyChangedListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithValue -= ViewModelPropertyChangedWithValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithBoolValue -= ViewModelPropertyChangedWithBoolValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithIntValue -= ViewModelPropertyChangedWithIntValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithFloatValue -= ViewModelPropertyChangedWithFloatValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithUIntValue -= ViewModelPropertyChangedWithUIntValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithColorValue -= ViewModelPropertyChangedWithColorValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithDoubleValue -= ViewModelPropertyChangedWithDoubleValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithVec2Value -= ViewModelPropertyChangedWithVec2ValueListenerOf_datasource_Root;
		if (_datasource_Root_NotificationItems != null)
		{
			_datasource_Root_NotificationItems.ListChanged -= OnList_datasource_Root_NotificationItemsChanged;
			for (int num = _widget_2.ChildCount - 1; num >= 0; num--)
			{
				Widget child = _widget_2.GetChild(num);
				((MapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate)child).OnBeforeRemovedChild(child);
				((MapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate)_widget_2.GetChild(num)).DestroyDataSource();
			}
			_datasource_Root_NotificationItems = null;
		}
		_datasource_Root = null;
	}

	public void SetDataSource(MapNotificationVM dataSource)
	{
		RefreshDataSource_datasource_Root(dataSource);
	}

	private void ViewModelPropertyChangedListenerOf_datasource_Root(object sender, PropertyChangedEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithValueListenerOf_datasource_Root(object sender, PropertyChangedWithValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithBoolValueListenerOf_datasource_Root(object sender, PropertyChangedWithBoolValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithIntValueListenerOf_datasource_Root(object sender, PropertyChangedWithIntValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithFloatValueListenerOf_datasource_Root(object sender, PropertyChangedWithFloatValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithUIntValueListenerOf_datasource_Root(object sender, PropertyChangedWithUIntValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithColorValueListenerOf_datasource_Root(object sender, PropertyChangedWithColorValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithDoubleValueListenerOf_datasource_Root(object sender, PropertyChangedWithDoubleValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void ViewModelPropertyChangedWithVec2ValueListenerOf_datasource_Root(object sender, PropertyChangedWithVec2ValueEventArgs e)
	{
		HandleViewModelPropertyChangeOf_datasource_Root(e.PropertyName);
	}

	private void HandleViewModelPropertyChangeOf_datasource_Root(string propertyName)
	{
		if (propertyName == "NotificationItems")
		{
			RefreshDataSource_datasource_Root_NotificationItems(_datasource_Root.NotificationItems);
		}
	}

	public void OnList_datasource_Root_NotificationItemsChanged(object sender, TaleWorlds.Library.ListChangedEventArgs e)
	{
		switch (e.ListChangedType)
		{
		case TaleWorlds.Library.ListChangedType.Reset:
		{
			for (int num = _widget_2.ChildCount - 1; num >= 0; num--)
			{
				Widget child3 = _widget_2.GetChild(num);
				((MapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate)child3).OnBeforeRemovedChild(child3);
				Widget child4 = _widget_2.GetChild(num);
				((MapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate)child4).SetDataSource(null);
				_widget_2.RemoveChild(child4);
			}
			break;
		}
		case TaleWorlds.Library.ListChangedType.Sorted:
		{
			for (int i = 0; i < _datasource_Root_NotificationItems.Count; i++)
			{
				MapNotificationItemBaseVM bindingObject = _datasource_Root_NotificationItems[i];
				_widget_2.FindChild((Widget widget) => widget.GetComponent<GeneratedWidgetData>().Data == bindingObject).SetSiblingIndex(i);
			}
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemAdded:
		{
			MapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate mapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate = new MapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate(base.Context);
			GeneratedWidgetData generatedWidgetData = new GeneratedWidgetData(mapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate);
			MapNotificationItemBaseVM dataSource = (MapNotificationItemBaseVM)(generatedWidgetData.Data = _datasource_Root_NotificationItems[e.NewIndex]);
			mapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate.AddComponent(generatedWidgetData);
			_widget_2.AddChildAtIndex(mapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate, e.NewIndex);
			mapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate.CreateWidgets();
			mapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate.SetIds();
			mapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate.SetAttributes();
			mapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate.SetDataSource(dataSource);
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemBeforeDeleted:
		{
			Widget child2 = _widget_2.GetChild(e.NewIndex);
			((MapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate)child2).OnBeforeRemovedChild(child2);
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemDeleted:
		{
			Widget child = _widget_2.GetChild(e.NewIndex);
			((MapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate)child).SetDataSource(null);
			_widget_2.RemoveChild(child);
			break;
		}
		case TaleWorlds.Library.ListChangedType.ItemChanged:
			break;
		}
	}

	private void RefreshDataSource_datasource_Root(MapNotificationVM newDataSource)
	{
		if (_datasource_Root != null)
		{
			_datasource_Root.PropertyChanged -= ViewModelPropertyChangedListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithValue -= ViewModelPropertyChangedWithValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithBoolValue -= ViewModelPropertyChangedWithBoolValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithIntValue -= ViewModelPropertyChangedWithIntValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithFloatValue -= ViewModelPropertyChangedWithFloatValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithUIntValue -= ViewModelPropertyChangedWithUIntValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithColorValue -= ViewModelPropertyChangedWithColorValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithDoubleValue -= ViewModelPropertyChangedWithDoubleValueListenerOf_datasource_Root;
			_datasource_Root.PropertyChangedWithVec2Value -= ViewModelPropertyChangedWithVec2ValueListenerOf_datasource_Root;
			if (_datasource_Root_NotificationItems != null)
			{
				_datasource_Root_NotificationItems.ListChanged -= OnList_datasource_Root_NotificationItemsChanged;
				for (int num = _widget_2.ChildCount - 1; num >= 0; num--)
				{
					Widget child = _widget_2.GetChild(num);
					((MapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate)child).OnBeforeRemovedChild(child);
					Widget child2 = _widget_2.GetChild(num);
					((MapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate)child2).SetDataSource(null);
					_widget_2.RemoveChild(child2);
				}
				_datasource_Root_NotificationItems = null;
			}
			_datasource_Root = null;
		}
		_datasource_Root = newDataSource;
		if (_datasource_Root == null)
		{
			return;
		}
		_datasource_Root.PropertyChanged += ViewModelPropertyChangedListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithValue += ViewModelPropertyChangedWithValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithBoolValue += ViewModelPropertyChangedWithBoolValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithIntValue += ViewModelPropertyChangedWithIntValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithFloatValue += ViewModelPropertyChangedWithFloatValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithUIntValue += ViewModelPropertyChangedWithUIntValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithColorValue += ViewModelPropertyChangedWithColorValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithDoubleValue += ViewModelPropertyChangedWithDoubleValueListenerOf_datasource_Root;
		_datasource_Root.PropertyChangedWithVec2Value += ViewModelPropertyChangedWithVec2ValueListenerOf_datasource_Root;
		_datasource_Root_NotificationItems = _datasource_Root.NotificationItems;
		if (_datasource_Root_NotificationItems != null)
		{
			_datasource_Root_NotificationItems.ListChanged += OnList_datasource_Root_NotificationItemsChanged;
			for (int i = 0; i < _datasource_Root_NotificationItems.Count; i++)
			{
				MapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate mapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate = new MapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate(base.Context);
				GeneratedWidgetData generatedWidgetData = new GeneratedWidgetData(mapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate);
				MapNotificationItemBaseVM dataSource = (MapNotificationItemBaseVM)(generatedWidgetData.Data = _datasource_Root_NotificationItems[i]);
				mapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate.AddComponent(generatedWidgetData);
				_widget_2.AddChildAtIndex(mapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate, i);
				mapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate.CreateWidgets();
				mapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate.SetIds();
				mapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate.SetAttributes();
				mapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate.SetDataSource(dataSource);
			}
		}
	}

	private void RefreshDataSource_datasource_Root_NotificationItems(MBBindingList<MapNotificationItemBaseVM> newDataSource)
	{
		if (_datasource_Root_NotificationItems != null)
		{
			_datasource_Root_NotificationItems.ListChanged -= OnList_datasource_Root_NotificationItemsChanged;
			for (int num = _widget_2.ChildCount - 1; num >= 0; num--)
			{
				Widget child = _widget_2.GetChild(num);
				((MapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate)child).OnBeforeRemovedChild(child);
				Widget child2 = _widget_2.GetChild(num);
				((MapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate)child2).SetDataSource(null);
				_widget_2.RemoveChild(child2);
			}
			_datasource_Root_NotificationItems = null;
		}
		_datasource_Root_NotificationItems = newDataSource;
		_datasource_Root_NotificationItems = _datasource_Root.NotificationItems;
		if (_datasource_Root_NotificationItems != null)
		{
			_datasource_Root_NotificationItems.ListChanged += OnList_datasource_Root_NotificationItemsChanged;
			for (int i = 0; i < _datasource_Root_NotificationItems.Count; i++)
			{
				MapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate mapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate = new MapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate(base.Context);
				GeneratedWidgetData generatedWidgetData = new GeneratedWidgetData(mapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate);
				MapNotificationItemBaseVM dataSource = (MapNotificationItemBaseVM)(generatedWidgetData.Data = _datasource_Root_NotificationItems[i]);
				mapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate.AddComponent(generatedWidgetData);
				_widget_2.AddChildAtIndex(mapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate, i);
				mapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate.CreateWidgets();
				mapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate.SetIds();
				mapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate.SetAttributes();
				mapNotificationUI__TaleWorlds_CampaignSystem_ViewModelCollection_Map_MapNotificationVM_Dependency_1_ItemTemplate.SetDataSource(dataSource);
			}
		}
	}
}
